'''
Esta aplicação irá criar um diretório, caso ele não exista, com o nome da pessoa.
Depois ele irá extrair a face da webcam quantas vezes o usuário apertar a tecla f
'''

# Importes:
import cv2  # Visão Computacional
import os  # Faz a manipulação dos diretórios
import time  # Nomear os arquivos
import mysql.connector  # Conectar ao banco de dados
from mysql.connector import Error


# Irá salvar o nome da pessoa e CPF:
def savePerson():
    global identificacao
    global cpf
    print('Qual o seu nome: ')
    name = input()
    identificacao = name
    cpf = input('Digite o seu CPF no seguinte formato xxx.xxx.xxx-xx: ')


# Criação dos diretórios:
def saveDir(img):
    global identificacao  # Nome da pessoa
    global id_dir  # ID para o BD
    global pasta  # O caminho do diretório da pessoa
    global diretorio  # Qual o diretório principal que a pessoa encontra-se
    id = time.strftime('%Y%m%d-%H%M%S')  # Para a nomeação dos arquivos
    if not os.path.exists('train'):  # Cria a pasta train para salvar os diretórios de cada pessoa
        os.makedirs('train')
    if not os.path.exists(f'train/{identificacao}'):  # Cria as subpastas para cada pessoa
        os.makedirs(f'train/{identificacao}')
        id_dir = id
        pasta = f'train/{identificacao}'
        diretorio = 'train'

    files = os.listdir(f'train/{identificacao}')
    cv2.imwrite(f'train/{identificacao}/{str(id)}.jpg', img)  # Salvar a imagem
    saveBD()


# Função para a integração do BD à aplicação:
def saveBD():
    global id_dir  # ID da pessoa
    global identificacao  # Nome da pessoa
    global cpf
    global diretorio
    global pasta  # O caminho até o diretório individual da pessoa
    dados = "'" + id_dir + "','" + identificacao + "','" + cpf + "','" + diretorio + "','" + pasta + "')"
    declaracao = '''INSERT INTO pessoa
                    (id, nome, CPF, diretorio, pasta)
                    values ('''
    sql = declaracao + dados
    try:
        con = mysql.connector.connect(host='localhost', database='reconhecimento_facial', user='root',
                                      password='123456789')
        inserir_produtos = sql
        cursor = con.cursor()  # Faz a iteração linha a linha para cada registro da tabela
        cursor.execute(inserir_produtos)  # Executa a inserção
        con.commit()  # Grava os dados na tabela de forma definitiva
        print(cursor.rowcount, 'registros inseridos na tabela!')
        cursor.close()
    except Error as erro:
        print('Falha ao inserir dados no MySQL: {}'.format(erro))

    # Todos os tipos de código para o BD precisa encerrar com esse comando
    finally:
        if (con.is_connected()):
            cursor.close()
            con.close()
            print("Conexão ao MySQL finalizada.")


# Variáveis:
id_dir = ''  # Chave primária
identificacao = ''
cpf = ''
pasta = ''
diretorio = ''

# Ler a webcam:
captura = cv2.VideoCapture(0)  # Faz a conexão com a câmera

# Carregar o xml do Haar Cascade:
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
# Responsável pela detecção da face e pelo desenho do retângulo

while True:

    verificador, frame = captura.read()  # Verifica se a conexão está estabelecida e retorna o frame
    if not verificador:  # Se houver album problema com a conexão o programa é fechado
        break
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Converter para cinza
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)  # Irá detectar as faces

    key = cv2.waitKey(1)

    # Fechar o while:
    if key == ord('q'):
        break

    # Salvar imagens:
    if key == ord('s'):
        savePerson()

    # Itera sobre todas as faces no frame:
    for (x, y, w, h) in faces:

        roi = gray[y:y+h, x:x+w]  # Cortar apenas a face

        cv2.rectangle(frame, (x, y), (x+w, y+h), (200, 0, 0), 3)  # Desenhar o retângulo na face

        if cv2.waitKey(1) == ord('f'):
            saveDir(roi)

    cv2.imshow('frame', frame)


captura.release()
cv2.destroyAllWindows()
