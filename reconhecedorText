import cv2
import face_recognition as fr
import mysql.connector
import numpy
import numpy as np
from io import BytesIO
from mysql.connector import Error


# Variáveis:
encoders = []
nomes = []
lista = []


def consultaBD():

    global nomes
    global encoders

    try:
        con = mysql.connector.connect(host='localhost', database='reconhecimento_facial', user='root',
                                      password='123456789')
        consulta_sql = "select nome, encode from pessoaTeste"
        cursor = con.cursor()
        cursor.execute(consulta_sql)
        linhas = cursor.fetchall()

        for linha in linhas:
            nomes.append(linha[0])

            novo = numpy.array([])
            nova = numpy.array([])
            certo = []

            novo = numpy.append(novo, linha[1].split())

            for x in novo:
                item = x
                for y in ['[', ']', 'b', '\n']:
                    item = item.replace(y, "")
                n = float(item)
                nova = numpy.append(nova, n)
            encoders.append(nova)
        print(encoders)
            #webcam(nova, linha[0])


    except Error as e:
        print('Erro ao acessar tabela MySQL', e)

    finally:
        if con.is_connected():
            cursor.close()
            con.close()
            print("Conexão ao MySQL finalizada.")


    captura = cv2.VideoCapture(0)

    while True:
        verificador, frame = captura.read()
        if not verificador:
            break



        imgRed = cv2.resize(frame, (0, 0), None, 0.25, 0.25)  # Redimensionar a imagem
        imgRed = cv2.cvtColor(imgRed, cv2.COLOR_BGR2RGB)

        try:
            faceLoc = fr.face_locations(imgRed)[0]  # Localizar a face na webcam

        except:
            faceLoc = []

        if faceLoc:
            y1, x2, y2, x1 = faceLoc  # Coordenadas da face na webcam
            y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4  # Multiplicou para retornar à dimensão original

            cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 255), 2)

            encodeImg = fr.face_encodings(imgRed)[0]

            for id, enc in enumerate(encoders):

                comp = fr.compare_faces([encodeImg], enc)
                if comp[0]:
                    cv2.rectangle(frame, (x1, y2 - 35), (x2, y2), (255, 0, 255), -1)
                    cv2.putText(frame, nomes[id], (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)


        cv2.imshow('Webcam', frame)

        if cv2.waitKey(1) == ord('q'):
            break

    captura.release()
    cv2.destroyAllWindows()


consultaBD()
