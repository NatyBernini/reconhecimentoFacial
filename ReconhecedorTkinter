import time
import face_recognition as fr
import cv2
import mysql.connector  # Conectar ao banco de dados
from mysql.connector import Error
import numpy
from tkinter import *
from tkinter import Tk, ttk
from tkinter import messagebox


class JFRecFacial:

    def __init__(self):

        self.imgRed = None
        self.encoders = None
        self.nomes = None
        self.nome = None
        self.cpf = None
        self.id = None
        self.encodePessoa = None

    # ------- Função recolher os dados da nova pessoa que será cadastrada -------
    def savePerson(self):

        # Cores ---------------------------------------
        co0 = "#f0f3f5"  # Preta
        co1 = "#feffff"  # Branca
        co2 = "#3fb5a3"  # Verde
        co3 = "#38576b"  # Valor
        co4 = "#403d3d"  # Letra

        # Criação da Janela ---------------------------
        window = Tk()
        window.title("Cadastro")
        window.geometry("310x380+565+250")
        window.configure(background=co1)
        window.resizable(0, 0)

        # Frames da janela ----------------------------
        frame_title = Frame(window, width=310, height=50, bg=co1, relief="flat")
        frame_title.grid(row=0, column=0, pady=1, padx=0, sticky=NSEW)

        frame_cadastro = Frame(window, width=310, height=330, bg=co1, relief="flat")
        frame_cadastro.grid(row=1, column=0, pady=1, padx=0, sticky=NSEW)

        # Configuração do Frame title -----------------
        label_title = Label(frame_title, text="Cadastro", anchor=NE, font="Ivy 25", bg=co1, fg=co4)
        label_title.place(x=5, y=5)

        label_line = Label(frame_title, text="", width=280, anchor=NW, font="Ivy 1", bg=co2, fg=co4)
        label_line.place(x=10, y=45)

        def credenciais():
            nome = entry_nome.get()
            sobrenome = entry_sobrenome.get()
            self.nome = nome+sobrenome
            self.cpf = entry_cpf.get()
            messagebox.showinfo("Cadastro realizado!")
            self.id = time.strftime('%Y%m%d-%H%M%S')  # Para a nomeação do encode

            imgAtual = cv2.cvtColor(self.imgRed, cv2.COLOR_BGR2RGB)  # Converter a imagem para RGB

            encoders = (fr.face_encodings(imgAtual)[0])  # Cria o encode da primeira face da foto

            self.encodePessoa = str(encoders)  # Converte o encode para string para salvar no banco

            JFRecFacial.saveBD(self)
            window.destroy()

        # Configuração do Frame cadastro --------------
        # Label Nome:
        label_nome = Label(frame_cadastro, text="Nome *", anchor=NW, font="Ivy 10", bg=co1, fg=co4)
        label_nome.place(x=10, y=20)

        # Entry Nome:
        entry_nome = Entry(frame_cadastro, width=25, justify="left", font=("", 15), highlightthickness=1,
                           relief="solid")
        entry_nome.place(x=14, y=50)

        # Label Sobrenome:
        label_sobrenome = Label(frame_cadastro, text="Sobrenome *", anchor=NW, font="Ivy 10", bg=co1, fg=co4)
        label_sobrenome.place(x=10, y=95)

        # Entry Sobrenome:
        entry_sobrenome = Entry(frame_cadastro, width=25, justify="left", font=("", 15), highlightthickness=1,
                                relief="solid")
        entry_sobrenome.place(x=14, y=125)

        # Label CPF:
        label_cpf = Label(frame_cadastro, text="CPF (xxx.xxx.xxx-xx) *", anchor=NW, font="Ivy 10", bg=co1, fg=co4)
        label_cpf.place(x=10, y=170)

        # Entry CPF:
        entry_cpf = Entry(frame_cadastro, width=25, justify="left", font=("", 15), highlightthickness=1, relief="solid")
        entry_cpf.place(x=14, y=200)

        # Botão para enviar as informações:
        btn_enviar = Button(frame_cadastro, text="ENVIAR", width=39, height=2, font="Ivy 8 bold", bg=co2, fg=co1,
                            relief=RAISED, bd=0, overrelief=RIDGE, command=credenciais)
        btn_enviar.place(x=15, y=255)

        window.mainloop()

    # --------------- Função para a integração do BD à aplicação ----------------
    def saveBD(self):

        host = 'localhost'
        database = 'reconhecimento_facial'
        user = 'root'
        password = '123456789'

        dados = f"'{self.id}','{self.nome}','{self.cpf}','{self.encodePessoa}')"

        declaracao = '''INSERT INTO pessoaTeste
                        (id, nome, CPF, encode)
                        values ('''

        sql = f'{declaracao}{dados}'

        try:
            con = mysql.connector.connect(host=host, database=database, user=user, password=password)
            inserir_produtos = sql
            cursor = con.cursor()  # Faz a iteração linha a linha para cada registro da tabela
            cursor.execute(inserir_produtos)  # Executa a inserção
            con.commit()  # Grava os dados na tabela de forma definitiva
            print('{} registro inserido na tabela!'.format(cursor.rowcount).center(70))
            cursor.close()

        except Error as erro:
            print('Falha ao inserir dados no MySQL: {}'.format(erro).center(70))

        # Todos os tipos de código para o BD precisa encerrar com esse comando
        finally:
            if con.is_connected():
                cursor.close()
                con.close()
                print("Conexão ao MySQL finalizada.".center(70))

    # ---------------------- Função que irá consultar o BD ----------------------
    def consultaBD(self):

        self.encoders = []
        self.nomes = []

        try:
            con = mysql.connector.connect(host='localhost', database='reconhecimento_facial', user='root',
                                          password='123456789')
            consulta_sql = "select nome, encode from pessoaTeste"
            cursor = con.cursor()
            cursor.execute(consulta_sql)
            linhas = cursor.fetchall()

            for linha in linhas:
                self.nomes.append(linha[0])

                novo = numpy.array([])
                nova = numpy.array([])

                novo = numpy.append(novo, linha[1].split())

                for x in novo:
                    item = x
                    for y in ['[', ']', 'b', '\n']:
                        item = item.replace(y, "")
                    n = float(item)
                    nova = numpy.append(nova, n)
                self.encoders.append(nova)

        except Error as e:
            print('Erro ao acessar tabela MySQL', e)

        finally:
            if con.is_connected():
                cursor.close()
                con.close()
                print("-"*29)
                print("Conexão ao MySQL finalizada".center(29))
                print("-" * 29)

        JFRecFacial.main(self)

    # ---------- Função que faz a captura e o reconhecimento da imagem ----------
    def main(self):

        # Ler a webcam:
        captura = cv2.VideoCapture(0, cv2.CAP_DSHOW)  # Faz a conexão com a câmera

        while True:

            verificador, frame = captura.read()
            if not verificador:
                break

            self.imgRed = cv2.resize(frame, (0, 0), None, 0.25, 0.25)  # Redimensionar a imagem
            self.imgRed = cv2.cvtColor(self.imgRed, cv2.COLOR_BGR2RGB)

            try:
                faceLoc = fr.face_locations(self.imgRed)[0]  # Localizar a face na webcam

            except:
                faceLoc = []

            if faceLoc:
                y1, x2, y2, x1 = faceLoc  # Coordenadas da face na webcam
                y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4  # Multiplicou para retornar à dimensão original

                cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 255), 2)

                encodeImg = fr.face_encodings(self.imgRed)[0]

                for id, enc in enumerate(self.encoders):

                    comp = fr.compare_faces([encodeImg], enc)
                    distancia = fr.face_distance([encodeImg], enc)

                    if comp[0] and distancia <= 0.50:
                        cv2.rectangle(frame, (x1, y2 - 35), (x2, y2), (255, 0, 255), -1)
                        cv2.putText(frame, self.nomes[id], (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)

            if cv2.waitKey(1) == ord('q'):
                break

            cv2.imshow('Webcam', frame)

            if cv2.waitKey(1) == ord('s'):
                JFRecFacial.savePerson(self)

        captura.release()
        cv2.destroyAllWindows()

    # --------------------- Função que mostra a tela inicial --------------------
    def TelaInicial(self):

        # ----------------- Cores ---------------------------------------
        co0 = "#f0f3f5"  # Preta
        co1 = "#feffff"  # Branca
        co2 = "#3fb5a3"  # Verde
        co3 = "#38576b"  # Valor
        co4 = "#403d3d"  # Letra

        # --------------------- Criação da Janela -----------------------
        window = Tk()
        window.title("Reconhecimento Facial")
        window.geometry("310x370+565+250")
        window.configure(background=co1)
        window.resizable(0, 0)

        # ---------------------- Frames da janela -----------------------
        frame_title = Frame(window, width=310, height=50, bg=co1, relief="flat")
        frame_title.grid(row=0, column=0, pady=1, padx=0, sticky=NSEW)

        frame_cadastro = Frame(window, width=310, height=310, bg=co1, relief="flat")
        frame_cadastro.grid(row=1, column=0, pady=1, padx=0, sticky=NSEW)

        frame_retorno = Frame(window, width=310, height=50, bg=co1, relief="flat")
        frame_retorno.grid(row=2, column=0, pady=1, padx=0, sticky=NSEW)

        # ------------------ Configuração do Frame title -----------------
        label_title = Label(frame_title, text="JFNA Reconhecimento Facial", anchor=NE, font="Ivy 16", bg=co1, fg=co4)
        label_title.place(x=5, y=5)

        label_line = Label(frame_title, text="", width=280, anchor=NW, font="Ivy 1", bg=co2, fg=co4)
        label_line.place(x=10, y=45)

        # ----------- Função para iniciar o Reconhecimento ------------
        def reconhecimento():
            JFRecFacial.consultaBD(self)

        def inserirPessoa():
            JFRecFacial.consultaBD(self)

        # ---------------- Configuração do Frame cadastro ----------------
        # Label Nome:
        label_nome = Label(frame_cadastro, text="Iniciar o Reconhecimento", anchor=NW, font="Ivy 12", bg=co1, fg=co4)
        label_nome.place(x=10, y=20)

        # Entry Nome:
        btn_reconhecimento = Button(frame_cadastro, text="RECONHECER", width=39, height=6, font="Ivy 9 bold", bg=co2,
                                    fg=co1,
                                    relief=RAISED, bd=0, overrelief=RIDGE, command=reconhecimento)
        btn_reconhecimento.place(x=15, y=50)

        # Label Sobrenome:
        label_sobrenome = Label(frame_cadastro, text="Cadastrar nova pessoa", anchor=NW, font="Ivy 12", bg=co1, fg=co4)
        label_sobrenome.place(x=10, y=160)

        # Entry Sobrenome:
        btn_enviar = Button(frame_cadastro, text="CADASTRAR", width=39, height=6, font="Ivy 8 bold", bg=co2, fg=co1,
                            relief=RAISED, bd=0, overrelief=RIDGE, command=inserirPessoa)
        btn_enviar.place(x=15, y=190)

        window.mainloop()
